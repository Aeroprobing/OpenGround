# object files
DRIVER_SRCS   = system_stm32f0xx.c stm32f0xx_gpio.c stm32f0xx_rcc.c stm32f0xx_adc.c stm32f0xx_dma.c
BOARD_SRCS    = $(DRIVER_SRCS) $(GENERIC_SRCS)

#crystal frequency
CRYSTAL_FREQ = 12000000

#name of executable
RESULT ?= openground

#faster build
MAKEFLAGS+="-j6 "

# include path
CFLAGS += -I./

# Tool path, only override if not set
TOOLROOT ?= /usr/bin

# Tools
CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as
OBJ=$(TOOLROOT)/arm-none-eabi-objcopy

# Code Paths
DEVICE=device
CORE  =core
LINK  =linker
PERIPH=peripheral_lib

# Search path for standard files
vpath %.c ./
vpath %.c $(SELF_DIR)

# Search path for perpheral library
vpath %.c $(CORE)
vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)
vpath %.s $(DEVICE)

# Processor specific
PTYPE = STM32F072
LDSCRIPT = $(LINK)/STM32F072VB_FLASH.ld
STARTUP = startup_stm32f072.s
STARTUP_OBJS=$(STARTUP:%.s=%.o)

# Compilation Flags
FULLASSERT = -DUSE_FULL_ASSERT

LDFLAGS+= -T$(LDSCRIPT) -mthumb -mcpu=cortex-m0
CFLAGS+= -mcpu=cortex-m0 -mthumb 
CFLAGS+= -DHSE_VALUE=$(CRYSTAL_FREQ)
CFLAGS+= -I$(DEVICE) -I$(CORE) -I$(PERIPH)/inc -I.
CFLAGS+= -D$(PTYPE) -DUSE_STDPERIPH_DRIVER $(FULLASSERT) -DBUILD_TARGET=$(TARGET)

OPENOCD_PIDFILE = /tmp/openocd_opensky.pid

LINK_OBJS=$(BOARD_SRCS:%.c=%.o)

HEADER_FILES  = $(wildcard $(SELF_DIR)/*.h)
HEADER_FILES += $(wildcard ./*.h)

# Build executable
board: $(RESULT).elf 

$(STARTUP_OBJS): $(STARTUP)
	$(AS) -I $(DEVICE) -o $@ $<

$(RESULT).elf: $(LINK_OBJS) $(STARTUP_OBJS)
	@echo $(LINK_OBJS)
	@echo prereqs that are newer than test: $?
	$(LD) $(LDFLAGS) -o $@ $(LINK_OBJS)  $(STARTUP_OBJS) $(LDLIBS) --specs=nosys.specs

%.bin: %.elf
	$(OBJ) -O binary $< $@

# pull in dependencies
# this includes all .d files produced along when building .o.
# On the first build there are not going to be any .d files.
# Hence, ignore include errors with -.
ALL_DEPS := $(patsubst %.c,%.d,$(BOARD_SRCS))
-include $(ALL_DEPS)

# compile and generate dependency info
%.o: %.c $(HEADER_FILES)
	$(CC) -c $(CFLAGS) $< -o $@
	$(CC) -MM -MP $(CFLAGS) $< > $@.d

%.o: %.s
	$(CC) -c $(CFLAGS) $(DEPFLAGS) $< -o $@

clean:
	rm -f *.o *.d $(RESULT).elf $(RESULT).bin

debug: $(RESULT).elf
	openocd -f /usr/share/openocd/scripts/interface/stlink-v2.cfg -f /usr/share/openocd/scripts/target/stm32f1x.cfg & echo $$! > $(OPENOCD_PIDFILE)
	sleep 1
	arm-none-eabi-gdb --eval-command="target remote localhost:3333" $(RESULT).elf
	if [ -a $(OPENOCD_PIDFILE) ]; then kill `cat $(OPENOCD_PIDFILE)`; fi;

flash : $(RESULT).bin
	#if [ -a $(OPENOCD_PIDFILE) ]; then kill `cat $(OPENOCD_PIDFILE)`; fi;
	#st-flash write $(RESULT).bin 0x8000000
	st-flash write $(RESULT).bin 0x8000000 

.PHONY: board clean flash debug
